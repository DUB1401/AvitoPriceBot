from Source.Functions import EscapeCharacters
from time import sleep

import telebot
import enum

# –¢–∏–ø—ã –æ—á–µ—Ä–µ–¥–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π.
class QueueTypes(enum.Enum):
	
	#---> –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞.
	#==========================================================================================#
	# –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
	Profiles = "profiles"
	# –ó–∞–¥–∞—á–∏.
	Tasks = "tasks"
	# –ö–≤–∞—Ä—Ç–∏—Ä—ã.
	Flats = "flats"
	# –†–∞–±–æ—Ç—ã.
	Jobs = "jobs"

# –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π.
class MessagesTemplates:
	
	# –°—Ç—Ä–æ–∏—Ç —Å–ø–∏—Å–æ–∫ –æ–ø–∏—Å–∞–Ω–∏–π —Ä–∞–±–æ—Ç.
	def __BuildJobsDescriptions(self, Jobs: list) -> list[str]:
		# –û–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç.
		Descriptions = list()
		
		# –î–ª—è –∫–∞–∂–¥–æ–π —Ä–∞–±–æ—Ç—ã.
		for Job in Jobs:
			# –ö–æ–Ω–≤–µ—Ä–∏—Ç—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É.
			Price = str(Job["price"])
			# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–ª—å—Ç–∞, –¥–æ–±–∞–≤–∏—Ç—å –ø–ª—é—Å.
			if Job["price"] > 0 and Job["delta"] == True: Price = "+" + Price
			# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
			Bufer = "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: " + str(Job["id"]) + "\n"
			Bufer += "–ù–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è: _*" + str(Job["profile"]) + "*_\n"
			if Job["flat"]!= None: Bufer += "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è: _*" + EscapeCharacters(Job["flat"]) + "*_\n"
			Bufer += "ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: " + str(Job["item-id"]) + "\n"
			Bufer += "–°—Ç–æ–∏–º–æ—Å—Ç—å: " + EscapeCharacters(Price) + "\n"
			Bufer += "–î–æ–ø–ª–∞—Ç–∞ –∑–∞ –≥–æ—Å—Ç—è: " + str(Job["extra-price"]) + "\n"
			Bufer += "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: _" + EscapeCharacters(str(Job["hour"]).rjust(2, '0') + ":00") + "_\n"
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞.
			Descriptions.append(Bufer)
		
		return Descriptions
	
	# –°—Ç—Ä–æ–∏—Ç —Å–ø–∏—Å–æ–∫ –æ–ø–∏—Å–∞–Ω–∏–π –∫–≤–∞—Ä—Ç–∏—Ä.
	def __BuildFlatsDescriptions(self, Flats: dict) -> list[str]:
		# –û–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç.
		Descriptions = list()
		
		# –î–ª—è –∫–∞–∂–¥–æ–π —Ä–∞–±–æ—Ç—ã.
		for FlatName in Flats.keys():
			# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
			Bufer = "–ò–º—è: _*" + EscapeCharacters(FlatName) + "*_\n"
			Bufer += "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: " + str(Flats[FlatName]) + "\n"
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞.
			Descriptions.append(Bufer)
		
		return Descriptions
	
	# –°—Ç—Ä–æ–∏—Ç —Å–ø–∏—Å–æ–∫ –æ–ø–∏—Å–∞–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª–µ–π.
	def __BuildProfilesDescriptions(self, UsersData: dict) -> list[str]:
		# –û–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π.
		Descriptions = list()
	
		# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
		for UserID in UsersData.keys():
			# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
			Bufer = "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: _*" + EscapeCharacters(UserID) + "*_\n"
			Bufer += "–ù–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è: _*" + str(UsersData[UserID]["profile"]) + "*_\n"
			Bufer += "ID –∫–ª–∏–µ–Ω—Ç–∞: " + EscapeCharacters(UsersData[UserID]["client-id"]) + "\n"
			Bufer += "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞: " + EscapeCharacters(UsersData[UserID]["client-secret"]) + "\n"
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞.
			Descriptions.append(Bufer)
		
		return Descriptions

	# –°—Ç—Ä–æ–∏—Ç —Å–ø–∏—Å–æ–∫ –æ–ø–∏—Å–∞–Ω–∏–π –∑–∞–¥–∞—á.
	def __BuildTasksDescriptions(self, Tasks: dict) -> list[str]:
		# –û–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á.
		Descriptions = list()
	
		# –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏.
		for TaskID in Tasks.keys():
			# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —Å—Ç—Ä–æ–∫—É.
			Price = str(Tasks[TaskID]["method"]["price"])
		
			# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
			if Tasks[TaskID]["method"]["delta"] == True and Tasks[TaskID]["method"]["price"] > 0:
				# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –ø–ª—é—Å–∞.
				Price = "+" + Price
			
			# –ë—É—Ñ–µ—Ä –æ–ø–∏—Å–∞–Ω–∏—è.
			Bufer = "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: " + EscapeCharacters(TaskID) + "\n"
			Bufer += "–ü—Ä–æ—Ñ–∏–ª—å –ê–≤–∏—Ç–æ: " + Tasks[TaskID]["method"]["profile"] + "\n"
			if Tasks[TaskID]["method"]["flat"]!= None: Bufer += "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è: _*" + Tasks[TaskID]["method"]["flat"] + "*_\n"
			Bufer += "ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: " + str(Tasks[TaskID]["method"]["item-id"]) + "\n"
			Bufer += "–°—Ç–æ–∏–º–æ—Å—Ç—å: " + EscapeCharacters(Price) + "\n"
		
			# –ï—Å–ª–∏ —Ç–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞ ‚Äì cron.
			if Tasks[TaskID]["trigger"]["type"] == "cron":
				Bufer += "–£—Å–ª–æ–≤–∏–µ: _–∫–∞–∂–¥—ã–π " + Tasks[TaskID]["trigger"]["day"] + " –≤ " + str(Tasks[TaskID]["trigger"]["hour"]) + ":" + str(Tasks[TaskID]["trigger"]["minute"]) + "_\.\n"
			
			else:
				Bufer += "–£—Å–ª–æ–≤–∏–µ: _" + EscapeCharacters(Tasks[TaskID]["trigger"]["day"]) + " –≤ " + str(Tasks[TaskID]["trigger"]["hour"]) + ":" + str(Tasks[TaskID]["trigger"]["minute"]) + "_\.\n"
			
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞.
			Descriptions.append(Bufer)
		
		return Descriptions
	
	# –°–æ–∑–¥–∞—ë—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π-–æ–ø–∏—Å–∞–Ω–∏–π.
	def __MakeQueue(self, Type: QueueTypes, Data: any, Header: str, ZeroItemsMessage: str) -> list[str]:
		# –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
		Messages = list()
		# –°–ø–∏—Å–æ–∫ –æ–ø–∏—Å–∞–Ω–∏–π.
		Descriptions = list()
		
		# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö.
		match Type:
			
			# –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π –∫–≤–∞—Ä—Ç–∏—Ä.
			case QueueTypes.Flats:
				Descriptions = self.__BuildFlatsDescriptions(Data) 
			
			# –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π —Ä–∞–±–æ—Ç.
			case QueueTypes.Jobs:
				Descriptions = self.__BuildJobsDescriptions(Data)
				
			# –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª–µ–π.
			case QueueTypes.Profiles:
				Descriptions = self.__BuildProfilesDescriptions(Data)
				
			# –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π –∑–∞–¥–∞—á.
			case QueueTypes.Tasks:
				Descriptions = self.__BuildTasksDescriptions(Data) 
		
		# –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.
		if len(Descriptions) == 0:
			# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Messages.append(ZeroItemsMessage)

		# –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
		elif len(Descriptions) <= self.__PagesFactor:
			# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á.
			Messages.append(f"*{Header}*\n\n" + "\n".join(Descriptions))
		
		# –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
		elif len(Descriptions) > self.__PagesFactor:
			# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
			PagesCount = len(Descriptions) // self.__PagesFactor
			# –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞, —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
			if len(Descriptions) % self.__PagesFactor > 0: PagesCount += 1
			# –ë—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.
			Bufer = f"*{Header} \[1 / {PagesCount}\]*\n\n"
			# –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
			CurrentIndex = 1
			# –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
			Page = 1
			
			# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è.
			for Index in range(0, len(Descriptions)):
				# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä.
				Bufer += Descriptions[Index] + "\n"
				
				# –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–π –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ.
				if CurrentIndex == self.__PagesFactor or Index == len(Descriptions) - 1:
					# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –æ–ø–∏—Å–∞–Ω–∏–π –∑–∞–¥–∞—á.
					Messages.append(Bufer)
					# –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
					Page += 1
					# –û–±–Ω—É–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞.
					Bufer = f"*{Header} \[{Page} / {PagesCount}\]*\n\n"
					# –û–±–Ω—É–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
					CurrentIndex = 1
					
				# –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞.
				CurrentIndex += 1

		return Messages
	
	# –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
	def __init__(self, Bot: telebot.TeleBot):
		  
		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤.
		#==========================================================================================#
		# –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
		self.__Bot = Bot
		# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–∏—Å–∞–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
		self.__PagesFactor = 10
		
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: —Å–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä.
	def Flats(self, Flats: dict, ChatID: int):
		# –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø–∏—Å–∞–Ω–∏–π.
		Messages = self.__MakeQueue(
			Type = QueueTypes.Flats,
			Data = Flats,
			Header = "üè† –°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä",
			ZeroItemsMessage = "*üè† –°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä*\n\n–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã\."
		)
					
		# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
		for Message in Messages:
			# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.
			self.__Bot.send_message(ChatID, Message, parse_mode = "MarkdownV2")
			# –í—ã–∂–∏–¥–∞–Ω–∏–µ –ø–∞—É–∑—ã.
			sleep(0.1)
		
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
	def Jobs(self, Jobs: list, ChatID: int):
		# –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø–∏—Å–∞–Ω–∏–π.
		Messages = self.__MakeQueue(
			Type = QueueTypes.Jobs,
			Data = Jobs,
			Header = "‚öíÔ∏è –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç",
			ZeroItemsMessage = "*‚öíÔ∏è –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç*\n\n–ù–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ\."
		)
					
		# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
		for Message in Messages:
			# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.
			self.__Bot.send_message(ChatID, Message, parse_mode = "MarkdownV2")
			# –í—ã–∂–∏–¥–∞–Ω–∏–µ –ø–∞—É–∑—ã.
			sleep(0.1)
		
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π.
	def List(self, UserData: dict, ChatID: int):
		# –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø–∏—Å–∞–Ω–∏–π.
		Messages = self.__MakeQueue(
			Type = QueueTypes.Profiles,
			Data = UserData,
			Header = "üë• –ü—Ä–æ—Ñ–∏–ª–∏",
			ZeroItemsMessage = "*‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ*\n\n–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ê–≤–∏—Ç–æ\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\."
		)
					
		# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
		for Message in Messages:
			# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.
			self.__Bot.send_message(ChatID, Message, parse_mode = "MarkdownV2")
			# –í—ã–∂–∏–¥–∞–Ω–∏–µ –ø–∞—É–∑—ã.
			sleep(0.1)
		
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
	def Tasks(self, Tasks: dict, ChatID: int):
		# –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø–∏—Å–∞–Ω–∏–π.
		Messages = self.__MakeQueue(
			Type = QueueTypes.Tasks,
			Data = Tasks,
			Header = "üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
			ZeroItemsMessage = "*üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á*\n\n–ù–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ\."
		)
					
		# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
		for Message in Messages:
			# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.
			self.__Bot.send_message(ChatID, Message, parse_mode = "MarkdownV2")
			# –í—ã–∂–∏–¥–∞–Ω–∏–µ –ø–∞—É–∑—ã.
			sleep(0.1)
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.
	def UserAuthRequired(self, ChatID: int):
		# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.
		self.__Bot.send_message(
			ChatID,
			"üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –ø–∞—Ä–æ–ª—å –∫ —Å–µ—Ä–≤–µ—Ä—É."
		)